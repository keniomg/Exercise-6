using System;

namespace oopTask88
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Play();
        }
    }

    public class Arena
    {
        public void Play()
        {
            const string ChooseGladiatorsAndFightCommand = "1";
            const string ExitCommand = "2";

            bool isContinue = true;

            while (isContinue)
            {
                Console.Clear();
                Console.WriteLine($"Вы можете выбрать одну из следующих опций:\n" +
                    $"\nВыбрать гладиаторов и начать бой - {ChooseGladiatorsAndFightCommand}" +
                    $"\nВыйти из программы - {ExitCommand}\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch ( userInput )
                {
                    case ChooseGladiatorsAndFightCommand:
                        ChooseGladiatorsAndFight();
                        break;

                    case ExitCommand:
                        isContinue = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.ReadKey();
            }

            Console.WriteLine("Вы вышли из программы...");
        }

        private void ChooseGladiatorsAndFight()
        {
            Gladiator firstGladiator = ChooseGladiator();

            if (firstGladiator != null)
            {
                Gladiator secondGladiator = ChooseGladiator();

                if (secondGladiator != null)
                {
                    Fight(firstGladiator, secondGladiator);
                }
                else
                {
                    Console.WriteLine("Введена неверная команда");
                }
            }
            else
            {
                Console.WriteLine("Введена неверная команда");
            }
        }

        private void Fight(Gladiator firstGladiator, Gladiator secondGladiator)
        {
            while (firstGladiator.HealthPoint > 0 && secondGladiator.HealthPoint > 0)
            {
                Console.WriteLine("Первый гладиатор проводит атаку:\n\n");
                firstGladiator.Attack(secondGladiator);
                secondGladiator.ShowInfo();
                Console.WriteLine();
                Console.WriteLine("Второй гладиатор проводит атаку:\n\n");
                secondGladiator.Attack(firstGladiator);
                firstGladiator.ShowInfo();
                Console.WriteLine();
                Console.WriteLine("Для следующего хода нажмите любую клавишу...\n");
                Console.ReadKey();
                Console.Clear();

                if (firstGladiator.HealthPoint <= 0 && secondGladiator.HealthPoint > 0)
                {
                    Console.WriteLine("Победил второй гладиатор!");
                    Console.ReadKey();
                }
                else if (firstGladiator.HealthPoint > 0 && secondGladiator.HealthPoint <= 0)
                {
                    Console.WriteLine("Победил первый гладиатор!");
                    Console.ReadKey();
                }
                else if (firstGladiator.HealthPoint <=0 && secondGladiator.HealthPoint <= 0)
                {
                    Console.WriteLine("Оба гладиатора погибли, ничья!");
                    Console.ReadKey();
                }
            }
        }

        public Gladiator ChooseGladiator()
        {
            const string ChooseDoubleCriticalStrikeGladiatorCommand = "1";
            const string ChooseDoublePunchGladiatorCommand = "2";
            const string ChooseBerserkGladiatorCommand = "3";
            const string ChooseMageGladiatorCommand = "4";
            const string ChooseEvadingGladiatorCommand = "5";

            Console.Clear();
            Console.WriteLine($"Вы можете выбрать гладиатора одного из следующих типов:\n" +
                $"\n{ChooseDoubleCriticalStrikeGladiatorCommand} - Гладиатор с вероятностью двойного урона" +
                $"\n{ChooseDoublePunchGladiatorCommand} - Гладиатор с двойным ударом на каждую третью атаку" +
                $"\n{ChooseBerserkGladiatorCommand} - Гладиатор берсерк" +
                $"\n{ChooseMageGladiatorCommand} - Гладиатор маг" +
                $"\n{ChooseEvadingGladiatorCommand} - Уворачивающийся гладиатор");
            Console.WriteLine();
            string userInput = Console.ReadLine();
            Gladiator gladiator = null;
            Console.Clear();

            switch ( userInput )
            {
                case ChooseDoubleCriticalStrikeGladiatorCommand:
                    gladiator = new DoubleCriticalStrikeGladiator(2000, 60);
                    Console.WriteLine("Выбран гладиатор с вероятностью двойного урона");
                    break;

                case ChooseDoublePunchGladiatorCommand:
                    gladiator = new DoublePunchGladiator(1800, 75);
                    Console.WriteLine("Выбран гладиатор с двойным ударом на каждую третью атаку");
                    break;

                case ChooseBerserkGladiatorCommand:
                    gladiator = new BerserkGladiator(1500, 50);
                    Console.WriteLine("Выбран гладиатор берсерк");
                    break;

                case ChooseMageGladiatorCommand:
                    gladiator = new MageGladiator(2000, 40, 800);
                    Console.WriteLine("Выбран гладиатор маг");
                    break;

                case ChooseEvadingGladiatorCommand:
                    gladiator = new EvadingGladiator(2100, 65);
                    Console.WriteLine("Выбран уворачивающийся гладиатор");
                    break;

                default:
                    Console.WriteLine("Введена неверная команда");
                    break;
            }

            Console.ReadKey();
            Console.Clear();
            return gladiator;
        }
    }

    public class Gladiator
    {
        public int HealthPoint { get; protected set; }
        protected int Damage;

        public Gladiator(int healthPoint, int damage) 
        {
            HealthPoint = healthPoint;
            Damage = damage;
        }

        public virtual void TakeDamage(int damage)
        {
            HealthPoint -= damage;
            Console.WriteLine($"Противник получает урон - {damage}!\n");

            if (HealthPoint <= 0)
            {
                HealthPoint = 0;
                Console.WriteLine("Противник погиб!\n");
            }
        }
        
        public virtual void Attack(Gladiator enemyGladiator)
        {
            enemyGladiator.TakeDamage(Damage);
        }

        public virtual void ShowInfo()
        {
            Console.WriteLine($"Текущее здоровье противника - {HealthPoint}\n");
        }
    }

    public class DoubleCriticalStrikeGladiator : Gladiator
    {
        private int _minMultiplierValue;
        private int _maxMultiplierValue;
        private Random _random;

        public DoubleCriticalStrikeGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _minMultiplierValue = 1;
            _maxMultiplierValue = 3;
            _random = new Random();
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            int damageMultiplier = _random.Next(_minMultiplierValue, _maxMultiplierValue);
            int damage = Damage * damageMultiplier;

            if (damageMultiplier == 2)
            {
                Console.WriteLine("Гладиатор наносит удвоенный урон!\n");
            }

            enemyGladiator.TakeDamage(damage);
        }
    }

    public class DoublePunchGladiator : Gladiator
    {
        private int _attackNumber;
        private int _maxAttackNumber;

        public DoublePunchGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _maxAttackNumber = 3;
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            if (_attackNumber >= _maxAttackNumber)
            {
                _attackNumber = 0;
                Console.WriteLine("Гладиатор проводит двойную атаку!\n");
                enemyGladiator.TakeDamage(Damage);
                enemyGladiator.TakeDamage(Damage);
            }
            else
            {
                _attackNumber++;
                enemyGladiator.TakeDamage(Damage);
            }
        }
    }

    public class BerserkGladiator : Gladiator
    {
        private int _healthPointHealingValue;
        private int _ragePointValue;
        private int _maxRagePointValue;

        public BerserkGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _ragePointValue = 0;
            _maxRagePointValue = 300;
            _healthPointHealingValue = 100;
        }

        public override void TakeDamage(int damage)
        {
            HealthPoint -= damage;
            Console.WriteLine($"Противник получает урон - {damage}!\n");
            _ragePointValue += damage;

            if (HealthPoint <= 0)
            {
                HealthPoint = 0;
                Console.WriteLine("Противник погиб!\n");
            }
            else
            {
                if (_ragePointValue >= _maxRagePointValue)
                {
                    HealthPoint += _healthPointHealingValue;
                    _ragePointValue -= _maxRagePointValue;
                    Console.WriteLine($"Противник восстанавливает здоровья - {_healthPointHealingValue}!\n");
                }
            }
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine($"Текущая ярость противника - {_ragePointValue}\n");
        }
    }

    public class MageGladiator : Gladiator
    {
        private int _fireBallDamageValue;
        private int _fireBallManaCostValue;
        private int _manaPoint;

        public MageGladiator(int healthPoint, int damage, int manaPoint) : base(healthPoint, damage) 
        {
            _fireBallDamageValue = 150;
            _fireBallManaCostValue = 100;
            _manaPoint = manaPoint;
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            if (_manaPoint >= _fireBallManaCostValue)
            {
                _manaPoint -= _fireBallManaCostValue;
                Console.WriteLine($"Гладиатор атакует огненным шаром и наносит урон - {_fireBallDamageValue}\n");
                enemyGladiator.TakeDamage(_fireBallDamageValue);
            }
            else
            {
                base.Attack(enemyGladiator);
            }
        }
    }

    public class EvadingGladiator : Gladiator
    {
        private Random _random;
        private int _evadingChance;
        private int _maxProbabilityValue;
        private int _minProbabilityValue;

        public EvadingGladiator(int healthPoint, int damage) : base(healthPoint, damage)
        {
            _evadingChance = 25;
            _minProbabilityValue = 0;
            _maxProbabilityValue = 101;
            _random = new Random();
        }

        private bool TryEvadeAttack()
        {
            int takeDamageModifierValue = _random.Next(_minProbabilityValue, _maxProbabilityValue);
            return (takeDamageModifierValue <= _evadingChance);
        }

        public override void TakeDamage(int damage)
        {
            if (TryEvadeAttack() == false)
            {
                base.TakeDamage(damage);
            }
            else
            {
                Console.WriteLine("Противник уворачивается от атаки и не получает урона!\n");
            }
        }
    }
}
