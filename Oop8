using System;
using System.Collections.Generic;
using static oopTask88.UserUtils;

namespace oopTask88
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Play();
        }
    }

    public class UserUtils
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int minRandomValue, int maxRandomValue)
        {
            return s_random.Next(minRandomValue, maxRandomValue);
        }
    }

    public class Arena
    {
        public void Play()
        {
            const string CommandMakeFight = "1";
            const string CommandExit = "2";

            bool isContinue = true;

            while (isContinue)
            {
                Console.Clear();
                Console.WriteLine($"Вы можете выбрать одну из следующих опций:\n" +
                    $"\nВыбрать гладиаторов и начать бой - {CommandMakeFight}" +
                    $"\nВыйти из программы - {CommandExit}\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch ( userInput )
                {
                    case CommandMakeFight:
                        MakeFight();
                        break;

                    case CommandExit:
                        isContinue = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("Для продолжения нажмите любую клавишу...");
                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine("Вы вышли из программы...");
        }

        private void MakeFight()
        {
            Gladiator firstGladiator;
            
            if (TryChooseGladiatorType(out firstGladiator) == true)
            {
                Gladiator secondGladiator;
                
                if (TryChooseGladiatorType(out secondGladiator) == true)
                {
                    Fight(firstGladiator, secondGladiator);
                    ShowWinnerInfo(firstGladiator, secondGladiator);
                }
                else
                {
                    Console.WriteLine("Введена неверная команда");
                }
            }
            else
            {
                Console.WriteLine("Введена неверная команда");
            }
        }

        private void Fight(Gladiator firstGladiator, Gladiator secondGladiator)
        {
            while (firstGladiator.HealthPoint > 0 && secondGladiator.HealthPoint > 0)
            {
                Console.WriteLine("Первый гладиатор проводит атаку:\n\n");
                firstGladiator.Attack(secondGladiator);
                secondGladiator.ShowInfo();
                Console.WriteLine();
                Console.WriteLine("Второй гладиатор проводит атаку:\n\n");
                secondGladiator.Attack(firstGladiator);
                firstGladiator.ShowInfo();
                Console.WriteLine();
                Console.WriteLine("Для следующего хода нажмите любую клавишу...\n");
                Console.ReadKey();
                Console.Clear();
            }
        }

        private void ShowWinnerInfo(Gladiator firstGladiator, Gladiator secondGladiator)
        {
            if (firstGladiator.HealthPoint <= 0 && secondGladiator.HealthPoint > 0)
            {
                Console.WriteLine("Победил второй гладиатор!");
            }
            else if (firstGladiator.HealthPoint > 0 && secondGladiator.HealthPoint <= 0)
            {
                Console.WriteLine("Победил первый гладиатор!");
            }
            else if (firstGladiator.HealthPoint <=0 && secondGladiator.HealthPoint <= 0)
            {
                Console.WriteLine("Оба гладиатора погибли, ничья!");
            }
        }

        private bool TryChooseGladiatorType(out Gladiator gladiator)
        {
            List<Gladiator> gladiators = new List<Gladiator>() {
                new DoubleCriticalStrikeGladiator(2000, 60),
                new DoublePunchGladiator(1800, 75),
                new BerserkGladiator(2100, 50),
                new MageGladiator(1500, 40, 1000),
                new EvadingGladiator(2000, 55)
            };
            int gladiatorNumber;
            Console.Clear();
            Console.WriteLine($"Вы можете выбрать гладиатора одного из следующих типов:\n");

            for (int i = 0; i < gladiators.Count; i++)
            {
                gladiatorNumber = i + 1;
                Console.WriteLine($"{gladiatorNumber} - {gladiators[i].ShowTypeInfo()}");
            }

            Console.WriteLine();
            string userInput = null;
            userInput = Console.ReadLine();
            gladiator = null;
            bool isOperationSuccessful = false;
            
            if (int.TryParse(userInput, out gladiatorNumber) == false)
            {
                return isOperationSuccessful;
            }
            
            int gladiatorIndex = gladiatorNumber - 1;
            Console.Clear();

            if (gladiatorIndex >= 0 && gladiatorIndex < gladiators.Count)
            {
                gladiator = gladiators[gladiatorIndex];
                Console.WriteLine("Выбран" + " " + gladiator.ShowTypeInfo());
                isOperationSuccessful = true;
            }
            else
            {
                Console.WriteLine("Не выбран гладиатор никакого типа");
            }

            Console.ReadKey();
            Console.Clear();
            return isOperationSuccessful;
        }
    }

    public class Gladiator
    {
        public Gladiator(int healthPoint, int damage) 
        {
            HealthPoint = healthPoint;
            Damage = damage;
        }

        public int Damage { get; protected set; }
        public int HealthPoint { get; protected set; }

        public virtual void TakeDamage(int damage)
        {
            HealthPoint -= damage;
            Console.WriteLine($"Противник получает урон - {damage}!\n");

            if (HealthPoint <= 0)
            {
                HealthPoint = 0;
                Console.WriteLine("Противник погиб!\n");
            }
        }
        
        public virtual string ShowTypeInfo() 
        {
            return null;
        }

        public virtual void Attack(Gladiator enemyGladiator)
        {
            enemyGladiator.TakeDamage(Damage);
        }

        public virtual void ShowInfo()
        {
            Console.WriteLine($"Текущее здоровье противника - {HealthPoint}\n");
        }
    }

    public class DoubleCriticalStrikeGladiator : Gladiator
    {
        private int _minMultiplierValue;
        private int _maxMultiplierValue;

        public DoubleCriticalStrikeGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _minMultiplierValue = 1;
            _maxMultiplierValue = 3;
            TypeInfo = "гладиатор с вероятностью двойного урона";
        }

        public string TypeInfo { get; private set; }

        public override string ShowTypeInfo()
        {
            return TypeInfo;
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            int damageMultiplier = GetRandomNumber(_minMultiplierValue, _maxMultiplierValue);
            int damage = Damage * damageMultiplier;
            int doubleDamageMultiplier = 2;

            if (damageMultiplier == doubleDamageMultiplier)
            {
                Console.WriteLine("Гладиатор наносит удвоенный урон!\n");
            }

            enemyGladiator.TakeDamage(damage);
        }
    }

    public class DoublePunchGladiator : Gladiator
    {
        private int _attackNumber;
        private int _maxAttackNumber;

        public DoublePunchGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _maxAttackNumber = 3;
            TypeInfo = "гладиатор с двойным ударом на каждую третью атаку";
        }

        public string TypeInfo { get; private set; }

        public override string ShowTypeInfo()
        {
            return TypeInfo;
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            if (_attackNumber >= _maxAttackNumber)
            {
                _attackNumber = 0;
                Console.WriteLine("Гладиатор проводит двойную атаку!\n");
                enemyGladiator.TakeDamage(Damage);
                enemyGladiator.TakeDamage(Damage);
            }
            else
            {
                _attackNumber++;
                enemyGladiator.TakeDamage(Damage);
            }
        }
    }

    public class BerserkGladiator : Gladiator
    {
        private int _healthPointHealingValue;
        private int _ragePointValue;
        private int _maxRagePointValue;

        public BerserkGladiator(int healthPoint, int damage) : base(healthPoint, damage) 
        {
            _ragePointValue = 0;
            _maxRagePointValue = 300;
            _healthPointHealingValue = 100;
            TypeInfo = "гладиатор берсерк";
        }

        public string TypeInfo { get; private set; }

        public override string ShowTypeInfo()
        {
            return TypeInfo;
        }

        public override void TakeDamage(int damage)
        {
            HealthPoint -= damage;
            Console.WriteLine($"Противник получает урон - {damage}!\n");
            _ragePointValue += damage;

            if (HealthPoint <= 0)
            {
                HealthPoint = 0;
                Console.WriteLine("Противник погиб!\n");
            }
            else if (_ragePointValue >= _maxRagePointValue)
            {
                HealthPoint += _healthPointHealingValue;
                _ragePointValue -= _maxRagePointValue;
                Console.WriteLine($"Противник восстанавливает здоровья - {_healthPointHealingValue}!\n");
            }
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine($"Текущая ярость противника - {_ragePointValue}\n");
        }
    }

    public class MageGladiator : Gladiator
    {
        private int _fireBallDamageValue;
        private int _fireBallManaCostValue;
        private int _manaPoint;

        public MageGladiator(int healthPoint, int damage, int manaPoint) : base(healthPoint, damage) 
        {
            _fireBallDamageValue = 150;
            _fireBallManaCostValue = 100;
            _manaPoint = manaPoint;
            TypeInfo = "гладиатор маг";
        }

        public string TypeInfo { get; private set; }

        public override string ShowTypeInfo()
        {
            return TypeInfo;
        }

        public override void Attack(Gladiator enemyGladiator)
        {
            if (_manaPoint >= _fireBallManaCostValue)
            {
                _manaPoint -= _fireBallManaCostValue;
                Console.WriteLine($"Гладиатор атакует огненным шаром и наносит урон - {_fireBallDamageValue}\n");
                enemyGladiator.TakeDamage(_fireBallDamageValue);
            }
            else
            {
                base.Attack(enemyGladiator);
            }
        }
    }

    public class EvadingGladiator : Gladiator
    {
        private int _evadingChance;
        private int _maxProbabilityValue;
        private int _minProbabilityValue;

        public EvadingGladiator(int healthPoint, int damage) : base(healthPoint, damage)
        {
            _evadingChance = 25;
            _minProbabilityValue = 0;
            _maxProbabilityValue = 101;
            TypeInfo = "уворачивающийся гладиатор";
        }

        public string TypeInfo { get; private set; }

        public override string ShowTypeInfo()
        {
            return TypeInfo;
        }

        public override void TakeDamage(int damage)
        {
            if (CanEvadeAttack() == false)
            {
                base.TakeDamage(damage);
            }
            else
            {
                Console.WriteLine("Противник уворачивается от атаки и не получает урона!\n");
            }
        }

        private bool CanEvadeAttack()
        {
            int takeDamageModifierValue = GetRandomNumber(_minProbabilityValue, _maxProbabilityValue);
            return (takeDamageModifierValue <= _evadingChance);
        }
    }
}
