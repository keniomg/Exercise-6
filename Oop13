using System;
using System.Collections.Generic;
using static OopTask13.UserUtils;
using System.Linq;

namespace OopTask13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService(10000, 500);
            carService.Administrate();
        }
    }

    public class UserUtils
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int minRandomValue, int maxRandomValue)
        {
            return s_random.Next(minRandomValue, maxRandomValue);
        }
    }

    public class CarService
    {
        private bool _isServiceWorking;
        private int _money;
        private int _servicePrice;
        private int _fixedFine;
        private List<Detail> _detailsStockList;
        private List<Detail> _detailsTypes;
        private bool _isRepairStarted;

        public CarService(int money, int servicePrice)
        {
             _detailsTypes = new List<Detail>()
            {
                new Detail("подшипник", 1000, false),
                new Detail("руль", 3500, false),
                new Detail("граната", 1500, false),
                new Detail("тормозные колодки", 1000, false),
                new Detail("рессоры", 1200, false)
            };
            _money = money;
            _detailsStockList = new List<Detail>();
            _servicePrice = servicePrice;
            _isServiceWorking = true;
            _isRepairStarted = false;
            _fixedFine = 100;
        }

        public void Administrate()
        {
            const string CommandServiceCar = "1";
            const string CommandExit = "2";

            FormDetailsStock();

            while (_isServiceWorking)
            {
                Console.WriteLine($"Вы можете выполнить одну из следующих операций:\n" +
                    $"{CommandServiceCar} - обслужить автомобиль\n" +
                    $"{CommandExit} - выйти из программы");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandServiceCar:
                        ServiceCar();
                        break;

                    case CommandExit:
                        _isServiceWorking = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("Для продолжения нажмите любую клавишу");
                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine("Вы вышли из программы");
        }

        private void ServiceCar()
        {
            const string CommandRepairCar = "1";
            const string CommandCancelRepairCar = "2";

            bool isContinue = true;
            Car car = new Car(_detailsTypes.ToList());
            car.BrokeRandomDetails();
            _isRepairStarted = false;

            while (isContinue)
            {
                Console.WriteLine($"Вы можете выполнить одну из следующих операций:\n" +
                    $"{CommandRepairCar} - произвести ремонт автомобиля\n" +
                    $"{CommandCancelRepairCar} - отказаться от ремонта автомобиля");
                Console.SetCursorPosition(0, 11);
                car.ShowInfo();
                ShowStockInfo();
                Console.WriteLine($"\nДеньги автосервиса: {_money}");
                Console.SetCursorPosition(0, 4);
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandRepairCar:
                        RepairCar(car, out isContinue);
                        break;

                    case CommandCancelRepairCar:
                        CancelRepairCar(car, out isContinue);
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("Для продолжения нажмите любую клавишу");
                Console.ReadKey();
                Console.Clear();
            }
        }

        private bool TryGetCorrectDetailNumber(Car car, out int detailNumber)
        {
            Console.WriteLine("Введите номер детали для замены:\n");
            string userInput = Console.ReadLine();
            List <Detail> detailsList = car.GetDetailsList();

            if (int.TryParse(userInput, out detailNumber) == false)
            {
                Console.WriteLine("Введено не число");
                return false;
            }

            if (detailNumber <= 0 || detailNumber > detailsList.Count)
            {
                Console.WriteLine("Номер детали введен неверно");
                return false;
            }

            return true;
        }

        private bool TryFindDetail(int detailNumber, List<Detail> detailsList, out int detailIndex, out Detail foundDetail)
        {
            detailIndex = detailNumber - 1;
            bool isDetailFound = false;
            foundDetail = null;

            for (int i = 0; i < _detailsStockList.Count; i++)
            {
                if (_detailsStockList[i].Name == detailsList[detailIndex].Name)
                {
                    isDetailFound = true;
                    foundDetail = _detailsStockList[i];
                }
            }

            if (isDetailFound == false)
            {
                Console.WriteLine("На складе нет подходящей детали");
                return false;
            }

            return true;
        }

        private void RepairCar(Car car, out bool isContinue)
        {
            isContinue = true;

            if (TryGetCorrectDetailNumber(car, out int detailNumber) == false || TryFindDetail(detailNumber, car.GetDetailsList(), out int detailIndex, out Detail foundDetail) == false)
            {
                return;
            }
            
            car.Repair(detailIndex, out isContinue, out bool isReplacedDetailWasBroken, foundDetail);
            int repairPrice = 0;

            if (isReplacedDetailWasBroken)
            {
                repairPrice = foundDetail.Cost + _servicePrice;
            }

            _detailsStockList.Remove(foundDetail);
            _isRepairStarted = true;
            _money += repairPrice;
        }

        private void CancelRepairCar(Car car, out bool isContinue)
        {
            bool isRepairStarted = _isRepairStarted;
            car.CancelRepair(isRepairStarted, out int brokenDetailsCost);
            int totalFine;

            if (_isRepairStarted)
            {
                totalFine = brokenDetailsCost;
            }
            else
            {
                totalFine = _fixedFine;
            }

            Console.WriteLine($"Вы отказались от ремонта автомобиля, штраф составит: {totalFine}");

            if (totalFine > _money)
            {
                Console.WriteLine("Автосервис закрывается из-за недостатка денег для выплаты штрафа");
                _isServiceWorking = false;
            }
            else
            {
                _money -= totalFine;
                Console.WriteLine($"\nваши деньги - {_money}\n");
            }

            isContinue = false;
        }

        private void ShowStockInfo()
        {
            if (_detailsStockList.Count == 0)
            {
                Console.WriteLine("\nСклад пуст");
            }
            else
            {   
                Console.WriteLine("\nВ данный момент на складе имеются следующие детали:\n");
                
                for (int i = 0; i < _detailsTypes.Count; i++)
                {
                    Console.WriteLine($"\n'{_detailsTypes[i].Name}' в количестве: ");
                    int detailsNumber = 0;

                    for (int j = 0; j < _detailsStockList.Count; j++)
                    {
                        if (_detailsTypes[i].Name == _detailsStockList[j].Name)
                        {
                            detailsNumber++;
                        }
                    }

                    Console.Write(detailsNumber + "\n");
                }
            }
        }

        private void FormDetailsStock()
        {
            int minDetailsAtStockNumber = 1;
            int maxDetailsAtStockNumber = 11;

            for (int i = 0; i < _detailsTypes.Count; i++)
            {
                int detailsAtStockNumber = GetRandomNumber(minDetailsAtStockNumber, maxDetailsAtStockNumber);

                for (int j = 0; j < detailsAtStockNumber; j++)
                {
                    _detailsStockList.Add(new Detail(_detailsTypes[i].Name, _detailsTypes[i].Cost, _detailsTypes[i].IsBroken));
                }
            }
        }
    }

    public class Car
    {
        private List<Detail> _detailsList;

        public Car(List<Detail> detailsTypes)
        {
            _detailsList = new List<Detail>(detailsTypes);

            for (int i = 0; i<_detailsList.Count; i++)
            {
                _detailsList[i] = new Detail(detailsTypes[i].Name, detailsTypes[i].Cost, detailsTypes[i].IsBroken);
            }
        }

        public List<Detail> GetDetailsList()
        {
            List<Detail> detailsList = _detailsList.ToList();
            return detailsList;
        }

        public void BrokeRandomDetails()
        {
            int minUnsuitableDetailsNumber = 1;
            int maxUnsuitableDetailsNumber = _detailsList.Count;
            int brokenDetailsNumber = GetRandomNumber(minUnsuitableDetailsNumber, maxUnsuitableDetailsNumber);
            int minDetailIndex = 0;
            int maxDetailIndex = _detailsList.Count;

            while (CalculateBrokenDetailsNumber() != brokenDetailsNumber)
            {
                int detailIndex = GetRandomNumber(minDetailIndex, maxDetailIndex);

                if (_detailsList[detailIndex].IsBroken == false)
                {
                    _detailsList[detailIndex].Break();
                }
            }
        }
        
        public int CalculateBrokenDetailsNumber()
        {
            int brokenDetailsNumber = 0;

            for (int i = 0; i < _detailsList.Count; i++)
            {
                if (_detailsList[i].IsBroken)
                {
                    brokenDetailsNumber++;
                }
            }

            return brokenDetailsNumber;
        }

        public void ShowInfo()
        {
            Console.WriteLine("Информация о состоянии деталей в данной машине:\n");

            for (int i = 0; i < _detailsList.Count; i++)
            {
                int detailNumber = i + 1;
                Console.WriteLine($"{detailNumber} - ");
                _detailsList[i].ShowInfo();
            }
        }

        public void Repair(int detailIndex, out bool isContinue, out bool isReplacedDetailWasBroken, Detail detailForReplace)
        {
            isReplacedDetailWasBroken = true;
            isContinue = true;

            if (detailForReplace.Name == _detailsList[detailIndex].Name)
            {
                if (_detailsList[detailIndex].IsBroken == false)
                {
                    isReplacedDetailWasBroken = false;
                }

                _detailsList[detailIndex] = detailForReplace;
            }

            if (CalculateBrokenDetailsNumber() == 0)
            {
                isContinue = false;
                Console.WriteLine("Отремонтированы все детали в автомобиле");
            }
        }

        public void CancelRepair(bool isRepairStarted, out int brokenDetailsCost)
        {
            brokenDetailsCost = 0;

            if (isRepairStarted)
            {
                for (int i = 0; i < _detailsList.Count; i++)
                {
                    if (_detailsList[i].IsBroken)
                    {
                        brokenDetailsCost += _detailsList[i].Cost;
                    }
                }
            }
        }
    }

    public class Detail
    {
        public Detail(string name, int cost, bool isDetailBroken)
        {
            Name = name;
            Cost = cost;
            IsBroken = isDetailBroken;
        }

        public string Name { get; private set; }
        public int Cost { get; private set; }
        public bool IsBroken { get; private set; }

        public void Break()
        {
            IsBroken = true;
        }

        public void ShowInfo()
        {
            if (IsBroken == false)
            {
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, не требует замены");
            }
            else
            {
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, требует замены");
            }
        }
    }
}
