using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OopTask13;

namespace OopTask13
{
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
    
	public class UserUtils
	{
        public static Random s_random = new Random();
		
		public static int GetRandomNumber(int minRandomValue, int maxRandomValue)
		{
            return s_random.Next(minRandomValue, maxRandomValue);
        }
    }
	
    public class CarService
    {
        private int _money;
		private List<Detail> _detailsTypes;
		private List<Detail> _detailsStockList;
		
		public CarService(int money)
		{
            _detailsTypes = new List<Detail>()
			{
                new Detail("подшипник", 1000, true),
				new Detail("руль", 3500, true),
				new Detail("граната", 1500, true),
				new Detail("тормозные колодки", 1000, true),
				new Detail("рессоры", 1200, true)            
			};
            _money = money;
			_detailsStockList = new List<Detail>();
        }
		
		public void RepairCar(Car car)
		{
            Console.WriteLine("Введите номер детали для замены:\n");
			string userInput = Console.ReadLine();
			
			if(int.TryParse(userInput, out int detailNumber) == false)
			{
                Console.WriteLine("Введено не число");
				return;
            }
			
			if(detailNumber <= 0 || detailNumber > car.DetailsList.Count)
			{
                Console.WriteLine("Номер детали введен неверно");
				return;
            }
        }
		
		public void ServiceCar()
		{
            const string CommandRepairCar = "1";
			const string CommandCancelRepairCar = "2";
			
			Car car = new Car(GetCarDetailsList());
			car.ShowInfo();
			ShowStockInfo();
			Console.WriteLine("Вы можете выполнить одну из следующих операций:");
			
			
			
		
        }
        
		private void ShowStockInfo()
		{
            if(_detailsStockList.Count == 0)
			{
                Console.WriteLine("\nСклад пуст");
            }
			else
			{
                Console.WriteLine("\nВ данный момент на складе имеются следующие детали:\n");
				int detailsNumber = 0;
				
                for (i = 0; i < _detailsTypes.Count; i++)
				{
                    Console.WriteLine($"'{_detailsTypes[i].Name}' в количестве: ")
					
					for(j = 0; j < _detailsStockList.Count; j++)
					{
                        if(_detailsTypes[i].Name == _detailsStockList[j].Name)
						{
                            detailsNumber++;
                        }
                    }
					
					Console.Write(detailNumber);
                }
            }
        }
		
        private void FormDetailsStock()
		{
            int minDetailsAtStockNumber = 1;
			int maxDetailsAtStockNumber = 11;
			
			for (i = 0; i < _detailsTypes.Count; i++)
			{
                int detailsAtStockNumber = UserUtils.GetRandomNumber(minDetailsAtStockNumber, maxDetailsAtStockNumber);
				
				for (j = 0; j < detailsAtStockNumber; j++)
				{
                    _detailsStockList.Add(_detailsTypes[i]);
                }
            }
        }

		private List<Detail> GetCarDetailsList()
		{
            List<Detail> carDetailsList = _detailsTypes.ToList();
			int minUnsuitableDetailsNumber = 1;
			int maxUnsuitableDetailsNumber = carDetailsList.Count;
			int unsuitableDetailsNumber = UserUtils.GetRandomNumber(minUnsuitableDetailsNumber, maxUnsuitableDetailsNumber);
			int minDetailIndex = 0;
			int maxDetailIndex = carDetailsList.Count;
			
		    for(i = 0; i < unsuitableDetailsNumber; i++)
			{
                int detailIndex = UserUtils.GetRandomNumber(minDetailIndex, maxDetailIndex);
				
				if(carDetailsList[i].IsDetailSuitable = true)
				{
                    carDetailsList[i].ChangeSuitableStatusToFalse();
                }
				else
				{
                    i--;
                }
            }
			
			return carDetailsList;
        }
    }

    public class Car
    {
        public Car(List<Detail> detailsList)
		{	
			DetailsList = detailsList;
        }
		
		public List<Detail> DetailsList {get; private set; }
		
		public void ShowInfo()
		{
            Console.WriteLine("Информация о состоянии деталей в данной машине:\n")
				
            for (i = 0; i < DetailsList.Count; i++)
			{
                DetailsList[i].ShowInfo();
            }
        }
    }

    public class Detail
    {
        public Detail(string name, int cost,bool isDetailSuitable)
        {
            Name = name;
            Cost = cost;
		    IsDetailSuitable = isDetailSuitable;
        }

        public string Name { get; private set; }
        public string Status { get; private set;}
        public int Cost { get; private set; }
		public bool IsDetailSuitable {get; private set; }
		
		public void ChangeSuitableStatusToFalse()
		{
            IsDetailSuitable = false;
        }
		
		public void ChangeSuitableStatusToTrue()
		{
            IsDetailSuitable = true;
        }
		
		public void ShowInfo()
		{
            if(IsDetailSuitable = true)
			{	
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, не требует замены");
			}
			else
			{
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, требует замены");
            }
        }
    }
}
