using System;
using System.Collections.Generic;
using static OopTask13.UserUtils;

namespace OopTask13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService(10000, 500);
            carService.Administrate();
        }
    }

    public class UserUtils
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int minRandomValue, int maxRandomValue)
        {
            return s_random.Next(minRandomValue, maxRandomValue);
        }
    }

    public class CarService
    {
        private int _money;
        private int _servicePrice;
        private List<Detail> _detailsStockList;
        private List<Detail> _detailsTypes;

        public CarService(int money, int servicePrice)
        {
             _detailsTypes = new List<Detail>()
            {
                new Detail("подшипник", 1000, false),
                new Detail("руль", 3500, false),
                new Detail("граната", 1500, false),
                new Detail("тормозные колодки", 1000, false),
                new Detail("рессоры", 1200, false)
            };
            _money = money;
            _detailsStockList = new List<Detail>();
            _servicePrice = servicePrice;
        }

        public void Administrate()
        {
            const string CommandServiceCar = "1";
            const string CommandExit = "2";

            FormDetailsStock();
            bool isServiceWorking = true;

            while (isServiceWorking)
            {
                Console.WriteLine($"Вы можете выполнить одну из следующих операций:\n" +
                    $"{CommandServiceCar} - обслужить автомобиль\n" +
                    $"{CommandExit} - выйти из программы");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandServiceCar:
                        ServiceCar(ref isServiceWorking);
                        break;

                    case CommandExit:
                        isServiceWorking = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("Для продолжения нажмите любую клавишу");
                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine("Вы вышли из программы");
        }

        private void ServiceCar(ref bool isServiceWorking)
        {
            const string CommandRepairCar = "1";
            const string CommandCancelRepairCar = "2";

            bool isRepairStarted = false;
            bool isContinue = true;
            Car car = new Car();
            car.FormDetailsList(out int brokenDetailsNumber, _detailsTypes);

            while (isContinue)
            {
                Console.WriteLine($"Вы можете выполнить одну из следующих операций:\n" +
                    $"{CommandRepairCar} - произвести ремонт автомобиля\n" +
                    $"{CommandCancelRepairCar} - отказаться от ремонта автомобиля");
                Console.SetCursorPosition(0, 11);
                car.ShowInfo();
                ShowStockInfo();
                Console.WriteLine($"\nДеньги автосервиса: {_money}");
                Console.SetCursorPosition(0, 4);
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandRepairCar:
                        car.Repair(ref isRepairStarted, ref brokenDetailsNumber, ref isContinue, ref _detailsStockList, _servicePrice, ref _money);
                        break; 
                
                    case CommandCancelRepairCar:
                        car.CancelRepairCar(isRepairStarted, ref isContinue, ref isServiceWorking, ref _money);
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("Для продолжения нажмите любую клавишу");
                Console.ReadKey();
                Console.Clear();
            }
        }

        private void ShowStockInfo()
        {
            if (_detailsStockList.Count == 0)
            {
                Console.WriteLine("\nСклад пуст");
            }
            else
            {   
                Console.WriteLine("\nВ данный момент на складе имеются следующие детали:\n");
                
                for (int i = 0; i < _detailsTypes.Count; i++)
                {
                    Console.WriteLine($"\n'{_detailsTypes[i].Name}' в количестве: ");
                    int detailsNumber = 0;
                    for (int j = 0; j < _detailsStockList.Count; j++)
                    {
                        if (_detailsTypes[i].Name == _detailsStockList[j].Name)
                        {
                            detailsNumber++;
                        }
                    }

                    Console.Write(detailsNumber + "\n");
                }
            }
        }

        private void FormDetailsStock()
        {
            int minDetailsAtStockNumber = 1;
            int maxDetailsAtStockNumber = 11;

            for (int i = 0; i < _detailsTypes.Count; i++)
            {
                int detailsAtStockNumber = GetRandomNumber(minDetailsAtStockNumber, maxDetailsAtStockNumber);

                for (int j = 0; j < detailsAtStockNumber; j++)
                {
                    _detailsStockList.Add(new Detail(_detailsTypes[i].Name, _detailsTypes[i].Cost, _detailsTypes[i].IsBroken));
                }
            }
        }
    }

    public class Car
    {
        private List<Detail> _detailsList;

        public void FormDetailsList(out int brokenDetailsNumber, List<Detail> detailsTypes)
        {
            _detailsList = new List<Detail>(detailsTypes);

            for (int i = 0; i < _detailsList.Count; i++)
            {
                _detailsList[i] = new Detail(detailsTypes[i].Name, detailsTypes[i].Cost, detailsTypes[i].IsBroken);
            }

            int minUnsuitableDetailsNumber = 1;
            int maxUnsuitableDetailsNumber = _detailsList.Count;
            brokenDetailsNumber = GetRandomNumber(minUnsuitableDetailsNumber, maxUnsuitableDetailsNumber);
            int minDetailIndex = 0;
            int maxDetailIndex = _detailsList.Count;

            for (int i = 0; i < brokenDetailsNumber; i++)
            {
                int detailIndex = GetRandomNumber(minDetailIndex, maxDetailIndex);

                if (_detailsList[detailIndex].IsBroken == false)
                {
                    _detailsList[detailIndex].Break();
                }
                else
                {
                    i--;
                }
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine("Информация о состоянии деталей в данной машине:\n");

            for (int i = 0; i < _detailsList.Count; i++)
            {
                int detailNumber = i + 1;
                Console.WriteLine($"{detailNumber} - ");
                _detailsList[i].ShowInfo();
            }
        }

        public bool TrySearchDetail(int detailIndex, List<Detail> detailsStockList, List<Detail> carDetailsList)
        {
            for (int i = 0; i < detailsStockList.Count; i++)
            {
                if (detailsStockList[i].Name == carDetailsList[detailIndex].Name)
                {
                    return true;
                }
            }

            return false;
        }

        public void Repair(ref bool isRepairStarted, ref int brokenDetailsNumber, ref bool isContinue, ref List<Detail> detailsStockList, int servicePrice, ref int money)
        {
            Console.WriteLine("Введите номер детали для замены:\n");
            string userInput = Console.ReadLine();
            bool isDetailFound = false;

            if (int.TryParse(userInput, out int detailNumber) == false)
            {
                Console.WriteLine("Введено не число");
                return;
            }

            if (detailNumber <= 0 || detailNumber > _detailsList.Count)
            {
                Console.WriteLine("Номер детали введен неверно");
                return;
            }

            int detailIndex = detailNumber - 1;

            for (int i = 0; i < detailsStockList.Count; i++)
            {
                if (detailsStockList[i].Name == _detailsList[detailIndex].Name)
                {
                    isDetailFound = true;
                }
            }

            if (isDetailFound == false)
            {
                Console.WriteLine("На складе нет подходящей детали");
                return;
            }
            else
            {
                Detail replacementDetail = null;
                int repairPrice = _detailsList[detailIndex].Cost + servicePrice;

                for (int i = 0; i < detailsStockList.Count; i++)
                {
                    if (detailsStockList[i].Name == _detailsList[detailIndex].Name)
                    {
                        if (_detailsList[detailIndex].IsBroken)
                        {
                            brokenDetailsNumber--;
                        }
                        else
                        {
                            repairPrice = 0;
                        }

                        replacementDetail = detailsStockList[i];
                        detailsStockList.Remove(detailsStockList[i]);
                        break;
                    }
                }

                _detailsList[detailIndex] = replacementDetail;
                money += repairPrice;
                isRepairStarted = true;

                if (brokenDetailsNumber == 0)
                {
                    isContinue = false;
                    Console.WriteLine("Отремонтированы все детали в автомобиле");
                }
            }
        }

        public void CancelRepairCar(bool isRepairStarted, ref bool isContinue, ref bool isServiceWorking, ref int money)
        {
            int fineForDetails = 0;
            int fixedFine = 100;

            if (isRepairStarted)
            {
                fixedFine = 0;

                for (int i = 0; i < _detailsList.Count; i++)
                {
                    if (_detailsList[i].IsBroken)
                    {
                        fineForDetails += _detailsList[i].Cost;
                    }
                }
            }

            int totalFine = fineForDetails + fixedFine;
            Console.WriteLine($"Вы отказались от ремонта автомобиля, штраф составит: {totalFine}");

            if (totalFine > money)
            {
                Console.WriteLine("Автосервис закрывается из-за недостатка денег для выплаты штрафа");
                isServiceWorking = false;
            }
            else
            {
                money -= totalFine;
                Console.WriteLine($"\nваши деньги - {money}\n");
            }

            isContinue = false;
        }
    }

    public class Detail
    {
        public Detail(string name, int cost, bool isDetailBroken)
        {
            Name = name;
            Cost = cost;
            IsBroken = isDetailBroken;
        }

        public string Name { get; private set; }
        public int Cost { get; private set; }
        public bool IsBroken { get; private set; }

        public void Break()
        {
            IsBroken = true;
        }

        public void ShowInfo()
        {
            if (IsBroken == false)
            {
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, не требует замены");
            }
            else
            {
                Console.WriteLine($"Деталь '{Name}', стоимость {Cost}, требует замены");
            }
        }
    }
}
