using System;
using System.Collections.Generic;
using System.Reflection.Emit;

namespace oopTask4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string TakeCardFromDeckCommand = "1";
            const string ShowCardsInHandCommand = "2";
            const string FinishDrawingCardsCommand = "3";
            const string MixCardsInDeckCommand = "4";
            const string ShowCardsInDeckCommand = "5";

            Deck cardList = new Deck();
            Player player = new Player();
            bool isWorking = true;
            cardList.Form();

            while (isWorking)
            {
                Console.WriteLine($"Вы можете выполнить одну из следующих команд:\n" +
                    $"{TakeCardFromDeckCommand} - взять карту из колоды\n" +
                    $"{ShowCardsInHandCommand} - показать карты в вашей руке\n" +
                    $"{FinishDrawingCardsCommand} - закончить набор карт\n" +
                    $"{MixCardsInDeckCommand} - перемешать карты в колоде\n" +
                    $"{ShowCardsInDeckCommand} - показать карты в колоде\n");
                string userInput = Console.ReadLine();
                Console.Clear();
                
                switch (userInput)
                {
                    case TakeCardFromDeckCommand:
                        player.TakeCard(cardList.GiveCard());
                        break;

                    case ShowCardsInHandCommand:
                        player.ShowCardsInHand();
                        break;

                    case FinishDrawingCardsCommand:
                        player.FinishDrawingCards(out isWorking);
                        break;

                    case MixCardsInDeckCommand:
                        cardList.MixCards(player);
                        break;

                    case ShowCardsInDeckCommand:
                        cardList.ShowCards(player);
                        break;

                    default:
                        player.WriteWrongInputMessage();
                        break;

                }

                Console.WriteLine("\nНажмите любую клавишу, чтобы продолжить...");
                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    public class Card
    {
        public Card(string suit, string value)
        {
            Suit = suit;
            Value = value;
        }

        public string Suit { get; private set; }
        public string Value { get; private set; }
    }

    public class Deck
    {
        private Random _random = new Random();
        private List<Card> _cards = new List<Card>();
        private string[] _suits;
        private string[] _values;

        public Deck()
        {
            _suits = new string[]{ "Черви", "Буби", "Крести", "Пики"};
            _values = new string[]{ "6", "7", "8", "9", "10", "В", "Д", "К", "Т" };
        }

        public void Form()
        {
            _cards.Clear();

            for (int i = 0; i < _suits.Length; i++)
            {
                for (int j = 0; j < _values.Length; j++)
                {
                    _cards.Add(new Card($"{_suits[i]}", $"{_values[j]}"));
                }
            }
        }

        public void ShowCards(Player player)
        {
            for (int i = 0; i < _cards.Count; i++)
                Console.WriteLine($"{_cards[i].Suit}, {_cards[i].Value}\n");
        }

        public Card GiveCard()
        {
            int lastCardIndex = _cards.Count - 1;
            Card takenCard = _cards[lastCardIndex];
            _cards.Remove(takenCard);
            return takenCard;
        }

        public void MixCards(Player player)
        {
            for (int i = _cards.Count - 1; i >= 1; i--)
            {
                int mixedCardIndex = _random.Next(_cards.Count);
                (_cards[i], _cards[mixedCardIndex]) = (_cards[mixedCardIndex], _cards[i]);
            }

            Console.WriteLine("Карты перемешаны");
        }
    }

    public class Player
    {
        private List<Card> _cardsInHand = new List<Card>();

        public void TakeCard(Card card)
        {
            int maxCardsInHandCount = 3;

            if (_cardsInHand.Count < maxCardsInHandCount)
            {
                _cardsInHand.Add(card);
                Console.WriteLine($"Вы взяли из колоды карту, теперь в вашей руке карт: {_cardsInHand.Count}.");
            }
            else
            {
                Console.WriteLine("В вашей руке уже достаточно карт.");
            }
        }

        public void ShowCardsInHand()
        {
            if (_cardsInHand.Count > 0)
            {
                for (int i = 0; i < _cardsInHand.Count; i++)
                    Console.WriteLine($"{_cardsInHand[i].Suit}, {_cardsInHand[i].Value}\n");
            }
            else
            {
                Console.WriteLine("В вашей руке нет ни одной карты");
            }
        }

        public void FinishDrawingCards(out bool isWorking)
        {
            Console.WriteLine("Вы закончили набор карт. В вашей руке следующие карты:\n");
            ShowCardsInHand();
            isWorking = false;
        }

        public void WriteWrongInputMessage()
        {
            Console.WriteLine("Введеная неверная команда");
        }
    }
}
