using System;
using System.Collections.Generic;

namespace oopTask3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string ShowInfoCommand = "1";
            const string BanPlayerCommand = "2";
            const string UnbanPlayerCommand = "3";
            const string DeletePlayerCommand = "4";
            const string AddPlayerCommand = "5";

            Database playerList = new Database();
            bool isOpen = true;
            string userInput;

            while (isOpen)
            {
                Console.Clear();
                Console.WriteLine($"{ShowInfoCommand} - показать информацию об игроках" +
                    $"\n{BanPlayerCommand} - забанить игрока\n{UnbanPlayerCommand} - разбанить игрока" +
                    $"\n{DeletePlayerCommand} - удалить игрока\n{AddPlayerCommand} - добавить игрока\n");
                userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case ShowInfoCommand:
                        playerList.ShowInfo();
                        break;

                    case BanPlayerCommand:
                        playerList.Ban();
                        break;

                    case UnbanPlayerCommand:
                        playerList.Unban();
                        break;

                    case DeletePlayerCommand:
                        playerList.DeletePlayer();
                        break;

                    case AddPlayerCommand:
                        playerList.AddPlayer();
                        break;

                    default:
                        Console.WriteLine("Команда введена неверно");
                        break;
                }

                Console.WriteLine("\nДля продолжения, нажмите любую клавишу...\n");
                Console.ReadKey();
            }
        }
    }

    public class Player
    {
        public Player(int id = 1234, int level = 1, string name = "Nameless", bool isBanned = false)
        {
            Id = id;
            Level = level;
            Name = name;
            IsBanned = isBanned;
        }

        public int Id { get; private set; }
        public int Level { get; private set; }
        public string Name { get; private set; }
        public bool IsBanned { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"ID - {Id}\nLevel - {Level}\nName - {Name}\nIs Banned - {IsBanned}");
        }

        public void Ban()
        {
            IsBanned = true;
        }

        public void Unban()
        {
            IsBanned = false;
        }
    }

    public class Database
    {
        private List<Player> _players = new List<Player> { new Player(1230, 14, "lox", false), new Player(4321, 22, "sas", false), new Player() };

        public void ShowInfo()
        {
            if (_players.Count > 0)
            {
                for (int i = 0; i < _players.Count; i++)
                {
                    _players[i].ShowInfo();
                    Console.WriteLine();
                }
            }
            else
            {
                Console.WriteLine("Список игроков пуст.");
            }
        }

        public void Ban()
        {
            Player player;
            bool isOperationSuccessful = false;

            if (TryGetPlayer(out player, out bool isInputedIdCorrect))
            {
                if (player.IsBanned == false)
                {
                    player.Ban();
                    Console.WriteLine($"Игрок с ID - {player.Id} теперь забанен\n");
                    isOperationSuccessful = true;
                }
                else
                {
                    Console.WriteLine($"Игрок с ID - {player.Id} уже забанен\n");
                }
            }

            WriteOperationResult(isOperationSuccessful);
        }

        public void Unban()
        {
            Player player;
            bool isOperationSuccessful = false;

            if (TryGetPlayer(out player, out bool isInputedIdCorrect))
            {
                if (player.IsBanned == true)
                {
                    player.Unban();
                    isOperationSuccessful = true;
                    Console.WriteLine($"Игрок с ID - {player.Id} теперь не забанен\n");
                }
                else
                {
                    Console.WriteLine($"Игрок с ID - {player.Id} ещё не забанен\n");
                }
            }

            WriteOperationResult(isOperationSuccessful);
        }

        public void DeletePlayer()
        {
            bool isOperationSuccessful = false;
            Player player;

            if (TryGetPlayer(out player, out bool isInputedIdCorrect))
            {
                _players.Remove(player);
                isOperationSuccessful = true;
            }

            WriteOperationResult(isOperationSuccessful);
        }

        public void AddPlayer()
        {
            Player player;
            int id = 0;
            string name = null;
            int level = 0;
            bool isAddSuccessful = true;
            string userInput;

            if (isAddSuccessful)
            {
                if (TryGetPlayer(out player, out bool isInputedIdCorrect))
                {
                    Console.WriteLine("Игрок с таким ID уже есть");
                    isAddSuccessful = false;
                }
                else
                {
                    if (isInputedIdCorrect)
                    {
                        id = player.Id;
                    }
                    else
                    {
                        isAddSuccessful = false;
                    }
                }
            }

            if (isAddSuccessful)
            {
                Console.Clear();
                Console.WriteLine("Введите уровень игрока\n");
                userInput = Console.ReadLine();

                if (int.TryParse(userInput, out level) == false)
                {
                    Console.Clear();
                    Console.WriteLine("Уровень игрока введён неверно");
                    isAddSuccessful = false;
                }
            }

            if (isAddSuccessful)
            {
                Console.Clear();
                Console.WriteLine("Введите имя игрока\n");
                name = Console.ReadLine();
                Console.Clear();
            }

            if (isAddSuccessful)
            {
                _players.Add(new Player(id, level, name, false));
                Console.WriteLine($"Игрок добавлен");
            }
            else
            {
                Console.WriteLine($"\nНе удалось добавить игрока");
            }
        }

        private bool TryGetPlayer(out Player player, out bool isInputedIdCorrect)
        {
            player = new Player();
            bool isOperationSuccessful = false;
            isInputedIdCorrect = true;
            int id;
            Console.WriteLine("Введите id игрока\n");
            string userInput = Console.ReadLine();
            Console.Clear();

            if (int.TryParse(userInput, out id))
            {
                for (int i = 0; i < _players.Count; i++)
                {
                    if (_players[i].Id == id)
                    {
                        player = _players[i];
                        isOperationSuccessful = true;
                    }
                }

                if (isOperationSuccessful == false)
                {
                    player = new Player(id);
                }
            }
            else
            {
                Console.WriteLine("ID игрока введено неверно.");
                isInputedIdCorrect = false;
            }

            return isOperationSuccessful;
        }

        private void WriteOperationResult(bool isOperationSuccessful)
        {
            if (isOperationSuccessful)
            {
                Console.WriteLine("Успешно выполнена операция с игроком");
            }
            else
            {
                Console.WriteLine("Не удалось выполнить операцию с игроком");
            }
        }
    }
}
