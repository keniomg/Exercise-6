using System;
using System.Collections.Generic;

namespace oopTask6
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();
            shop.Enter();
        }
    }

    public class Shop
    {
        public void ExecuteTransaction(Seller seller, Buyer buyer)
        {
            Console.WriteLine("Введите название товара:\n");
            string userInput = Console.ReadLine();

            if (seller.TryFindProductInAssortment(userInput, out Product product) == false)
            {
                Console.WriteLine("\nНе удалось найти товар с таким названием");
            }
            else
            {
                if (buyer.CalculateIsFundsEnough(product.Cost) == false)
                {
                    Console.WriteLine("\nУ вас недостаточно средств для покупки");
                }
                else
                {
                    seller.SellProduct(product);
                    buyer.BuyProduct(product);
                    Console.WriteLine("\nПокупка совершена");
                }
            }
        }

        public void Enter()
        {
            const string ShowProductsCommand = "1";
            const string BuyProductCommand = "2";
            const string ShowInventoryCommand = "3";

            Seller seller = new Seller(1000000);
            Buyer buyer = new Buyer(10000);
            bool isContinue = true;

            while (isContinue)
            {
                Console.WriteLine($"Ваши средства - {buyer.Money} \n\nВы можете выполнить одну из следующих операций:" +
                    $"\n\n{ShowProductsCommand} - показать товары в магазине" +
                    $"\n\n{BuyProductCommand} - купить товар" +
                    $"\n\n{ShowInventoryCommand} - посмотреть содержимое инвентаря\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case ShowProductsCommand:
                        seller.ShowProducts();
                        break;

                    case BuyProductCommand:
                        ExecuteTransaction(seller, buyer);
                        break;

                    case ShowInventoryCommand:
                        buyer.ShowProducts();
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                Console.WriteLine("\nДля продолжения нажмите любую клавишу...\n");
                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    public class TransactionParticipant
    {
        protected List<Product> Products;

        public TransactionParticipant(int money)
        {
            Products = new List<Product>();
        }

        public int Money { get; protected set; }

        public virtual void ShowProducts()
        {
            for (int i = 0; i < Products.Count; i++)
            {
                Products[i].ShowInfo();
            }
        }
    }

    public class Seller : TransactionParticipant
    {
        public Seller(int money) : base(money)
        {
            Products = new List<Product>
            {
                new Product("Картофель", 1500),
                new Product("Хлеб", 100),
                new Product("Помидоры", 150),
                new Product("Алмазный меч", 15000),
                new Product("Ухо вепря", 10)
            };
            Money = money;
        }

        public void SellProduct(Product product)
        {
            Products.Remove(product);
            Money += product.Cost;
        }

        public override void ShowProducts()
        {
            if (Products.Count == 0)
            {
                Console.WriteLine("Инвентарь торговца пуст");
            }
            else
            {
                base.ShowProducts();
            }
        }

        public bool TryFindProductInAssortment(string nameOfProduct, out Product product)
        {
            product = null;

            for (int i = 0; i < Products.Count; i++)
            {
                if (nameOfProduct.ToLower() == Products[i].Name.ToLower())
                {
                    product = Products[i];
                    return true;
                }
            }

            return false;
        }
    }

    public class Buyer : TransactionParticipant
    {
        public Buyer(int money) : base(money)
        {
            Products = new List<Product>();
            Money = money;
        }

        public override void ShowProducts()
        {
            if (Products.Count == 0)
            {
                Console.WriteLine("Ваш инвентарь пуст");
            }
            else
            {
                base.ShowProducts();
            }
        }

        public bool CalculateIsFundsEnough(int productCost)
        {
            if (Money < productCost)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public void BuyProduct(Product product)
        {
            Products.Add(product);
            Money -= product.Cost;
        }
    }

    public class Product
    {
        public Product(string name, int cost)
        {
            Name = name;
            Cost = cost;
        }

        public string Name { get; private set; }
        public int Cost { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"{Name}, {Cost}\n");
        }
    }
}
