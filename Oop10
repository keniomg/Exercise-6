using System;
using System.Collections.Generic;
using static OopTask10.UserUtils;

namespace OopTask10
{
    internal class Program
    {
        static void Main(string[] args)
        {
            War war = new War();
            war.Play();
        }
    }

    public class UserUtils
    {
        public static Random s_random = new Random();

        public static int GenerateRandomNumber(int minimumValue, int maximumValue)
        {
            return s_random.Next(minimumValue, maximumValue);
        }
    }

    public class UserInterface
    {
        public static void ShowPressAnyKeyForContinueMessage()
        {
            Console.WriteLine("\nдля продолжения нажмите любую клавишу...");
            Console.ReadKey();
            Console.Clear();
        }
    }

    public class War
    {
        private List<Soldier> _soldierTypes;

        public void Play()
        {
            const string CommandStartBattle = "1";
            const string CommandExit = "2";

            bool isContinue = true;

            while (isContinue)
            {
                Console.Clear();
                Console.WriteLine($"Вы можете выбрать одну из следующих опций:\n" +
                    $"\nСформировать взводы и начать бой - {CommandStartBattle}" +
                    $"\nВыйти из программы - {CommandExit}\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandStartBattle:
                        StartBattle();
                        break;

                    case CommandExit:
                        isContinue = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда");
                        break;
                }

                UserInterface.ShowPressAnyKeyForContinueMessage();
            }

            Console.WriteLine("Вы вышли из программы...");
        }

        public bool TryFindAliveEnemy(Platoon platoon, out int aliveSoldiers)
        {
            bool isSearchSuccesfull = false;
            aliveSoldiers = 0;

            for (int i = 0; i < platoon.GetSoldiersList().Count; i++)
            {
                if (platoon.GetSoldiersList()[i].Health > 0)
                {
                    isSearchSuccesfull = true;
                    aliveSoldiers++;
                }
            }

            return isSearchSuccesfull;
        }

        private List<Soldier> FormSoldiersList()
        {
            int minimumSoldiersNumber = 7;
            int maximumSoldiersNumber = 8;
            int soldiersNumber = GenerateRandomNumber(minimumSoldiersNumber, maximumSoldiersNumber);
            List<Soldier> platoonSoldiersList = new List<Soldier>(soldiersNumber);
            int soldierTypeIndex;
            Console.WriteLine($"Размер взвода составит: {soldiersNumber}");

            for (int i = 0; i < platoonSoldiersList.Capacity; i++)
            {
                _soldierTypes = new List<Soldier>()
                {
                    new Soldier(1500, 50, 100),
                    new Sniper(1200, 20, 150, 2),
                    new Splasher(800, 40, 80),
                    new MultipleAttacker(1000, 10, 100)
                };
                soldierTypeIndex = GenerateRandomNumber(0, _soldierTypes.Count);
                platoonSoldiersList.Add(_soldierTypes[soldierTypeIndex]);
                Console.WriteLine("Добавлен солдат типа: " + _soldierTypes[soldierTypeIndex].Type);
            }

            UserInterface.ShowPressAnyKeyForContinueMessage();
            return platoonSoldiersList;
        }

        private void StartBattle()
        {
            Platoon firstPlatoon = new Platoon(FormSoldiersList());
            Platoon secondPlatoon = new Platoon(FormSoldiersList());

            while (TryFindAliveEnemy(secondPlatoon, out int aliveSoldiers) && TryFindAliveEnemy(firstPlatoon, out aliveSoldiers))
            {
                Console.WriteLine("Первый взвод атакует второй взвод!\n");
                firstPlatoon.Attack(secondPlatoon, out List<Soldier> secondPlatoonDiedSoldiers);
                UserInterface.ShowPressAnyKeyForContinueMessage();
                Console.WriteLine("Второй взвод атакует первый взвод!\n");
                secondPlatoon.Attack(firstPlatoon, out List<Soldier> firstPlatoonDiedSoldiers);
                UserInterface.ShowPressAnyKeyForContinueMessage();
                firstPlatoon.RemoveDiedSoldiers(firstPlatoonDiedSoldiers);
                secondPlatoon.RemoveDiedSoldiers(secondPlatoonDiedSoldiers);
            }

            DeterminateWinnerPlatoon(firstPlatoon, secondPlatoon);
        }

        private void DeterminateWinnerPlatoon(Platoon firstPlatoon, Platoon secondPlatoon)
        {
            if (firstPlatoon.GetSoldiersList().Count == 0 && secondPlatoon.GetSoldiersList().Count > 0)
            {
                Console.WriteLine("Победил второй взвод!");
            }
            else if (firstPlatoon.GetSoldiersList().Count > 0 && secondPlatoon.GetSoldiersList().Count == 0)
            {
                Console.WriteLine("Победил первый взвод!");
            }
            else if (firstPlatoon.GetSoldiersList().Count == 0 && secondPlatoon.GetSoldiersList().Count == 0)
            {
                Console.WriteLine("Ничья!");
            }
        }
    }

    public class Platoon
    {
        private List<Soldier> _soldiersList = new List<Soldier>();

        public Platoon(List<Soldier> soldiersList)
        {
            _soldiersList = soldiersList;
        }

        public List<Soldier> GetSoldiersList()
        {
            return _soldiersList;
        }

        public void Attack(Platoon platoon, out List<Soldier> totalDiedSoldiers)
        {
            int attackingSoldierNumber = 0;
            totalDiedSoldiers = new List<Soldier>();
            War war = new War();

            foreach (Soldier soldier in _soldiersList)
            {
                if (war.TryFindAliveEnemy(platoon, out int aliveSoldiers))
                {
                    attackingSoldierNumber++;
                    Console.WriteLine($"\nАтакует солдат номер {attackingSoldierNumber}\n");
                    soldier.Attack(platoon, out List<Soldier> diedSoldiers);

                    //if (diedSoldiers.Count > 0)
                    //{
                    //    CalculateDiedSoldiers(out totalDiedSoldiers, diedSoldiers);
                    //}
                    for (int i = 0; i < diedSoldiers.Count; i++)
                    {
                        totalDiedSoldiers.Add(diedSoldiers[i]);
                    }
                }
            }
        }

        public void RemoveDiedSoldiers(List<Soldier> diedSoldiers)
        {
            for (int i = 0; i < diedSoldiers.Count; i++)
            {
                _soldiersList.Remove(diedSoldiers[i]);
            }
        }

        //private void CalculateDiedSoldiers(out List<Soldier> totalDiedSoldiers, List<Soldier> diedSoldiers)
        //{
        //    //totalDiedSoldiers = new List<Soldier>();

        //    for (int i = 0; i < diedSoldiers.Count; i++)
        //    {
        //        totalDiedSoldiers.Add(diedSoldiers[i]);
        //    }
        //}
    }

    public class Soldier
    {
        public Soldier(int health, int armor, int damage)
        {
            Health = health;
            Armor = armor;
            Damage = damage;
            Type = "обычный солдат";
        }

        public int Health { get; protected set; }
        public int Armor { get; protected set; }
        public int Damage { get; protected set; }
        public string Type {  get; protected set; }

        public virtual void Attack(Platoon attackedPlatoon, out List<Soldier> diedSoldiers)
        {
            bool isAttackPerformed = false;
            diedSoldiers = new List<Soldier>();
            List<Soldier> attackedSoldiersList = attackedPlatoon.GetSoldiersList();

            while (isAttackPerformed == false)
            {

                int attackedSoldierIndex = GenerateRandomNumber(0, attackedSoldiersList.Count);

                if (attackedSoldiersList[attackedSoldierIndex].Health > 0)
                {
                    int makedDamage = Damage - attackedSoldiersList[attackedSoldierIndex].Armor;
                    MakeDamage(attackedSoldierIndex, attackedSoldiersList, makedDamage, out Soldier diedSoldier);

                    if (diedSoldier != null)
                    {
                        diedSoldiers.Add(diedSoldier);
                    }

                    isAttackPerformed = true;
                }
            }
        }

        public virtual void MakeDamage(int attackedEnemyIndex, List<Soldier> soldiers, int makedDamage, out Soldier diedSoldier)
        {
            diedSoldier = null;

            if (soldiers[attackedEnemyIndex].Health > 0)
            {
                soldiers[attackedEnemyIndex].TakeDamage(makedDamage);
                int attackedEnemyNumber = attackedEnemyIndex + 1;

                if (soldiers[attackedEnemyIndex].Health > 0)
                {
                    Console.WriteLine($"{Type} атакует солдата противника под номером {attackedEnemyNumber} типа '{soldiers[attackedEnemyIndex].Type}'" +
                        $"\nи наносит урона: {makedDamage}\n" +
                        $"Оставшееся здоровье атакованного солдата: {soldiers[attackedEnemyIndex].Health}\n");
                }
                else
                {
                    soldiers[attackedEnemyIndex].Health = 0;
                    Console.WriteLine($"{Type} атакует солдата противника под номером {attackedEnemyNumber} типа '{soldiers[attackedEnemyIndex].Type}'" +
                        $"\nи убивает его!\n");
                    diedSoldier = soldiers[attackedEnemyIndex];
                }
            }
        }

        private void TakeDamage(int takedDamage)
        {
            Health -= takedDamage;

            if (Health < 0)
            {
                Health = 0;
            }
        }
    }

    public class Sniper : Soldier
    {
        public Sniper(int health, int armor, int damage, int damageMultiplier) : base(health, armor, damage*damageMultiplier) 
        {
            Type = "снайпер";
        }
    }

    public class Splasher : Soldier 
    {
        public Splasher(int health, int armor, int damage) : base(health, armor, damage) 
        {
            Type = "сплэшер";
        }
            
        public override void Attack(Platoon attackedPlatoon, out List<Soldier> diedSoldiers) 
        {
            diedSoldiers = new List<Soldier>();
            int attackedEmemiesNumber = 3;
            int attackedEnemyIndex;
            List<Soldier> attackedSoldiersList = attackedPlatoon.GetSoldiersList();
            War war = new War();
            war.TryFindAliveEnemy(attackedPlatoon, out int aliveSoldiers);

            if (attackedEmemiesNumber > aliveSoldiers)
            {
                attackedEmemiesNumber = aliveSoldiers;
            }

            List<int> attackedEnemiesIndexes = new List<int>(attackedEmemiesNumber);

            for (int i = 0; i < attackedEmemiesNumber; i++)
            {
                attackedEnemyIndex = GenerateRandomNumber(0, attackedSoldiersList.Count);

                if (attackedEnemiesIndexes.Contains(attackedEnemyIndex) == false)
                {
                    if (attackedSoldiersList[attackedEnemyIndex].Health > 0)
                    {
                        attackedEnemiesIndexes.Add(attackedEnemyIndex);
                        int makedDamage = Damage - attackedSoldiersList[attackedEnemyIndex].Armor;
                        MakeDamage(attackedEnemyIndex, attackedSoldiersList, makedDamage, out Soldier diedSoldier);

                        if (diedSoldier != null)
                        {
                            diedSoldiers.Add(diedSoldier);
                        }
                    }
                    else
                    {
                        i--;
                    }
                }
                else
                {
                    i--;
                }
            }
        }
    }

    public class MultipleAttacker : Soldier
    {
        public MultipleAttacker(int health, int armor, int damage) : base(health, armor, damage) 
        {
            Type = "множественный атакователь";
        }
        
        public override void Attack(Platoon attackedPlatoon, out List<Soldier> diedSoldiers)
        {
            diedSoldiers = new List<Soldier>();
            int attacksNumber = 3;
            int attackedEnemyIndex;
            List<Soldier> attackedSoldiersList = attackedPlatoon.GetSoldiersList();

            for (int i = 0; i < attacksNumber; i++)
            {
                attackedEnemyIndex = GenerateRandomNumber(0, attackedSoldiersList.Count);
                int makedDamage = Damage - attackedSoldiersList[attackedEnemyIndex].Armor;

                if (attackedSoldiersList[attackedEnemyIndex].Health > 0)
                {
                    MakeDamage(attackedEnemyIndex, attackedSoldiersList, makedDamage, out Soldier diedSoldier);
                    
                    if (diedSoldier != null)
                    {
                        diedSoldiers.Add(diedSoldier);

                        if (diedSoldiers.Count == attackedSoldiersList.Count)
                        {
                            break;
                        }
                    }
                }
            }
        }
    }
}
