using System;
using System.Collections.Generic;

namespace oopTask7
{
    internal class Program
    {
        static void Main(string[] args)
        {
            TrainManagementProgram trainManagementProgram = new TrainManagementProgram();
            trainManagementProgram.Run();
        }
    }

    public class TrainManagementProgram
    {
        private List<string> _destinationsList;
        private List<Train> _trains;
        private readonly Random _random = new Random();
        
        public TrainManagementProgram()
        {
            _trains = new List<Train>();
            _destinationsList = new List<string> 
            {
                "Астрахань",
                "Барнаул",
                "Москва",
                "Волгоград",
                "Иркутск",
                "Сыктывкар"
            };
        }

        public void Run()
        {
            const string AddTrainCommand = "1";
            const string ShowAllTrainsInfoCommand = "2";
            const string ExitCommand = "3";

            bool isContinue = true;

            while (isContinue)
            {
                if (_trains.Count <= 5)
                {
                    ShowAllTrainsInfo();
                }
                else
                {
                    Console.WriteLine("Общее количество поездов слишком велико, для отображения на стартовой панели." +
                        "\nДля просмотра всех текущих рейсов, введите соответствующую команду.\n");
                    ShowTrainsInfoAtStartPanel();
                }

                Console.SetCursorPosition(0, 20);
                Console.WriteLine($"Вы можете выполнить одну из следующих комманд:\n" +
                    $"\nДобавить новый рейс - {AddTrainCommand}" +
                    $"\nПоказать информацию о всех текущих рейсах - {ShowAllTrainsInfoCommand}" +
                    $"\nВыйти из программы - {ExitCommand}\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case AddTrainCommand:
                        AddTrain();
                        break;

                    case ShowAllTrainsInfoCommand:
                        ShowAllTrainsInfo();
                        break;

                    case ExitCommand:
                        isContinue = false;
                        break;

                    default:
                        WriteErrorMessage();
                        break;
                }

                if (userInput != ExitCommand)
                {
                    Console.WriteLine("\nДля продолжения нажмите любую клавишу...\n");
                    Console.ReadKey();
                }

                Console.Clear();
            }
        }

        private void ShowAvailableDestinations(List<string> destinations)
        {
            for (int i = 0; i < destinations.Count; i++)
            {
                Console.WriteLine(i + 1 + " " + destinations[i]);
            }
        }

        private void AddTrain()
        {
            string startDestination = SetStartDestination();

            if (startDestination != null)
            {
                string finalDestination = SetFinalDestination(startDestination);

                if (finalDestination != null)
                {
                    int passengersNumber = GetPassengersNumber();
                    int carriageCapacity = GetCarriageCapacity();
                    int carriageNumber = CalculateCarriageNumber(passengersNumber, carriageCapacity);
                    Train train = new Train(passengersNumber, carriageCapacity, carriageNumber, startDestination, finalDestination);
                    _trains.Add(train);
                    train.ShowInfo();
                }
                else
                {
                    WriteErrorMessage();
                }
            }
            else
            {
                WriteErrorMessage();
            }
        }

        private void ShowAllTrainsInfo()
        {
            if (_trains.Count == 0)
            {
                Console.WriteLine("В данный момент нет текущих рейсов.");
            }
            foreach (Train train in _trains)
            {
                train.ShowInfo();
                Console.WriteLine();
            }
        }

        private void ShowTrainsInfoAtStartPanel()
        {
            int maxTrainsInfoAtStartPanelCount = 5;

            for (int i = 0; i < maxTrainsInfoAtStartPanelCount; i++)
            {
                _trains[i].ShowInfo();
                Console.WriteLine();
            }
        }

        private void WriteErrorMessage()
        {
            Console.WriteLine("Ошибка: Введены неверные данные. Проверьте корректность вводимых данных");
        }

        private List<string> FormFinalDestinationsList(string startDestination)
        {
            List<string> finalDestinations = new List<string>();

            for (int i = 0; i < _destinationsList.Count; i++)
            {
                if (_destinationsList[i] != startDestination)
                {
                    finalDestinations.Add(_destinationsList[i]);
                }
            }

            return finalDestinations;
        }

        private string SetStartDestination()
        {
            Console.WriteLine("Введите номер начального пункта следования поезда:\n");
            ShowAvailableDestinations(_destinationsList);
            Console.WriteLine();
            string userInterfaceDestinationNumber = Console.ReadLine();
            Console.Clear();

            if (IsDestinationNumberCorrect(userInterfaceDestinationNumber, out int destinationNumber, _destinationsList))
            {
                string startDestination = _destinationsList[destinationNumber];
                return startDestination;
            }
            else
            {
                return null;
            }
        }

        private string SetFinalDestination(string startDestination)
        {
            List<string> finalDestinationsList = FormFinalDestinationsList(startDestination);
            Console.WriteLine("Введите номер конечного пункта следования поезда:\n");
            ShowAvailableDestinations(finalDestinationsList);
            Console.WriteLine();
            string userInterfaceDestinationNumber = Console.ReadLine();
            Console.Clear();

            if (IsDestinationNumberCorrect(userInterfaceDestinationNumber, out int destinationNumber, finalDestinationsList))
            {
                string finalDestination = finalDestinationsList[destinationNumber];
                return finalDestination;
            }
            else
            {
                return null;
            }
        }

        private bool IsDestinationNumberCorrect(string userInterfaceDestinationNumber, out int programDestinationNumber, List<string> destinationsList)
        {
            programDestinationNumber = 0;

            if (int.TryParse(userInterfaceDestinationNumber, out int destinationNumber) == false)
            {
                return false;
            }

            programDestinationNumber = --destinationNumber;
            return (destinationNumber >= 0 && destinationNumber < destinationsList.Count);
        }

        private int CalculateCarriageNumber(int passengersNumber, int carriageCapacity)
        {
            int carriageNumber = (int)Math.Ceiling((float)passengersNumber / carriageCapacity);
            return carriageNumber;
        }

        private int GetPassengersNumber()
        {
            int minimumPassengersNumber = 1;
            int maximunPassengersNumber = 301;
            return _random.Next(minimumPassengersNumber, maximunPassengersNumber);
        }

        private int GetCarriageCapacity()
        {
            int tenPassengers = 10;
            int minimumPassengersTensNumber = 3;
            int maximumPassengersTensNumber = 6;
            return _random.Next(minimumPassengersTensNumber, maximumPassengersTensNumber)*tenPassengers;
        }
    }

    public class Train
    {
        public Train(int passengersNumber, int carriageCapacity, int carriageNumber, string startDestination, string finalDestination)
        {
            PassengersNumber = passengersNumber;
            CarriageCapacity = carriageCapacity;
            StartDestination = startDestination;
            FinalDestination = finalDestination;
            CarriageNumber = carriageNumber;
        }

        public string StartDestination { get; private set; }
        public string FinalDestination { get; private set; }
        public int PassengersNumber { get; private set; }
        public int CarriageCapacity { get; private set; }
        public int CarriageNumber { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"На поезде, следующем из города {StartDestination} в город {FinalDestination}" +
                $" будет перевезено всего пассажиров {PassengersNumber}.\nДля этого будет использовано всего вагонов {CarriageNumber} с вместимостью мест {CarriageCapacity}.");
        }
    }
}
